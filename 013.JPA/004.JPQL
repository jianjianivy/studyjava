JPQL
 Java　Persistence　Query　Language
 JPA独自の問い合わせ言語

特徴
　インスタンスの集合に対して検索を行う
　利用するデータベースごとの違いはJPAエンジンが吸収
　
JPQLクエリの生成
Query q1 = entityManager.createQuery(
                 "select p from Product p where p.name = ?");

◆JPOLパラメータの指定
(1)バインドindex
Query q1 = entityManager.createQuery(
                 "select p from Product p where p.name = ?");
q1.setParameter(1,"バナナ");

(2)バインド名
Query q1 = entityManager.createQuery(
                 "select p from Product p where p.name = :name");
q1.setParameter("name","バナナ");

◆JPQLクエリの実行
複数エンジンを返す
List<Product> result = q1.getResultLits();

単一のエンティティを返す
Product product = (Product)q1.getSingleResult();
※結果が複数件あった場合、java.persistence.NonUniqueResultExceptionが発生
　結果が0件の場合、java.persistence.NoResultExceptionが発生
 
SQLの直接利用
createNativeQuery以外はJPOLと同様
Query q1 = entityManager.createNativeQuery(
                 "select * from PRODUCT");


動的なクエリ定義の問題点
　毎回EntiyManagerがJPOLを解析する
　　　⇒パフォーマンスが低下する
　文字列連結を使用した場合、外部からの入力データのサニタイジングが必要になる
　　　⇒セキュリティ上脆弱になる
   
⇒解決　
NamedQueryによるクエリの定義:

エンティティのアノテーションとして、JPOL文字列を定義する
@NamedQueries({
    @NamedQuery(name="Product.findAll",query="SELECT p FROM Product p"),
    //注意nameは、persistence-unit全体で一意にすること
    @NamedQuery(name="Product.findByName",query="SELECT p FROM Product p WHERE p.name = :name"),
})
public class Product{}

NamedQueryによるクエリの実行:

em.createNamedQuery("Product.findByName",Product.class)
  .setParameter("name",name)
  .getSingleResult();






