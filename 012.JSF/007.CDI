CDIのDIコンテナは定義情報をクラスに定義されているアノテーションから読み取る
CDIのDIコンテナによって管理するクラスにアノテートするアノテーション
　５つのCDIスコープアノテーション
 　　@RequestScoped
 　　@ConversationScoped
 　　@SessionScoped
 　　@ApplicationScoped
 　　@Dependent：アノテートされたBeanの呼出元（クライアント）のスコープを引き続ぐ
 　　　　　　　　　（スコープが呼出元に依存する場合に指定する）

　※異なるスコープを持ったCDIBeanの間に依存関係があったとしても、
　　それぞれスコープは独立して動作する
  
  --------------------------------------------
  @RequestScope
  class RequestBean{
      int requestVal;
      @Inject
      praivate SessionBean s;
  }
  
  @SessionScope
  class SessionBean{
      int sesseionVal;
  }
  
  requestValはHTTPリクエストが終了すると消滅するが、
  sesseionValは消滅しない
  --------------------------------------------
  
　CDI管理下のオブジェクトことをCDI　Managed　Beanと呼ぶ
 
BackingBeanの管理はJSFとCDIのどちらかとかを選択できる
　CDIベースのアプリケーションの場合、CDIを使うことが推奨される
　スコープアノテーションがCDIとJSFでパッケージが異なるので注意
　　CDI：javax.enterprise.context
　　JSF：javax.faces.bean
  
@Injectのついた属性の型に一致するCDIBeanをインジェクション（依存関係の解決）する

----------------------------------
CDIライフサイクルメソッド
@PostConstruct
　CDIBeanの初期化を行うメソッドにつけるアノテーション
　⇒すべてのインジェクション処理が終わった直後に実行される
　　コンストラクタより後に実行されるのがポイント！！！

@PreDestory
　CDIBeanの終了処理を行うメソッドにつけるアノテーション
　⇒CDIBeanが破棄される直前に実行される
 
----------------------------------
型に一致するBeanが複数ある場合
CDIではインジェクションする候補が複数あった場合に限定する機能があるい
　◆限定子（Qualifer）
　◆Alternative
 
 




















